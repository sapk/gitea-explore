// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Repository Repository represents a repository
// swagger:model Repository
type Repository struct {

	// allow merge
	AllowMerge bool `json:"allow_merge_commits,omitempty"`

	// allow rebase
	AllowRebase bool `json:"allow_rebase,omitempty"`

	// allow rebase merge
	AllowRebaseMerge bool `json:"allow_rebase_explicit,omitempty"`

	// allow squash
	AllowSquash bool `json:"allow_squash_merge,omitempty"`

	// archived
	Archived bool `json:"archived,omitempty"`

	// avatar URL
	AvatarURL string `json:"avatar_url,omitempty"`

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// has issues
	HasIssues bool `json:"has_issues,omitempty"`

	// has pull requests
	HasPullRequests bool `json:"has_pull_requests,omitempty"`

	// has wiki
	HasWiki bool `json:"has_wiki,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// ignore whitespace conflicts
	IgnoreWhitespaceConflicts bool `json:"ignore_whitespace_conflicts,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// original URL
	OriginalURL string `json:"original_url,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// external tracker
	ExternalTracker *ExternalTracker `json:"external_tracker,omitempty"`

	// external wiki
	ExternalWiki *ExternalWiki `json:"external_wiki,omitempty"`

	// internal tracker
	InternalTracker *InternalTracker `json:"internal_tracker,omitempty"`

	// owner
	Owner *User `json:"owner,omitempty"`

	// parent
	Parent *Repository `json:"parent,omitempty"`

	// permissions
	Permissions *Permission `json:"permissions,omitempty"`
}

// Validate validates this repository
func (m *Repository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalTracker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalWiki(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalTracker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Repository) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Repository) validateExternalTracker(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalTracker) { // not required
		return nil
	}

	if m.ExternalTracker != nil {
		if err := m.ExternalTracker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_tracker")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateExternalWiki(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalWiki) { // not required
		return nil
	}

	if m.ExternalWiki != nil {
		if err := m.ExternalWiki.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_wiki")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateInternalTracker(formats strfmt.Registry) error {

	if swag.IsZero(m.InternalTracker) { // not required
		return nil
	}

	if m.InternalTracker != nil {
		if err := m.InternalTracker.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("internal_tracker")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *Repository) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Repository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Repository) UnmarshalBinary(b []byte) error {
	var res Repository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
