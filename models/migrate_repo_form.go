// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MigrateRepoForm MigrateRepoForm form for migrating repository
// swagger:model MigrateRepoForm
type MigrateRepoForm struct {

	// auth password
	AuthPassword string `json:"auth_password,omitempty"`

	// auth username
	AuthUsername string `json:"auth_username,omitempty"`

	// clone addr
	// Required: true
	CloneAddr *string `json:"clone_addr"`

	// description
	Description string `json:"description,omitempty"`

	// issues
	Issues bool `json:"issues,omitempty"`

	// labels
	Labels bool `json:"labels,omitempty"`

	// milestones
	Milestones bool `json:"milestones,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// pull requests
	PullRequests bool `json:"pull_requests,omitempty"`

	// releases
	Releases bool `json:"releases,omitempty"`

	// repo name
	// Required: true
	RepoName *string `json:"repo_name"`

	// UID
	// Required: true
	UID *int64 `json:"uid"`

	// wiki
	Wiki bool `json:"wiki,omitempty"`
}

// Validate validates this migrate repo form
func (m *MigrateRepoForm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloneAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MigrateRepoForm) validateCloneAddr(formats strfmt.Registry) error {

	if err := validate.Required("clone_addr", "body", m.CloneAddr); err != nil {
		return err
	}

	return nil
}

func (m *MigrateRepoForm) validateRepoName(formats strfmt.Registry) error {

	if err := validate.Required("repo_name", "body", m.RepoName); err != nil {
		return err
	}

	return nil
}

func (m *MigrateRepoForm) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MigrateRepoForm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MigrateRepoForm) UnmarshalBinary(b []byte) error {
	var res MigrateRepoForm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
