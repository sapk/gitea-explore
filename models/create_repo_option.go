// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRepoOption CreateRepoOption options when creating repository
// swagger:model CreateRepoOption
type CreateRepoOption struct {

	// Whether the repository should be auto-intialized?
	AutoInit bool `json:"auto_init,omitempty"`

	// Description of the repository to create
	Description string `json:"description,omitempty"`

	// Gitignores to use
	Gitignores string `json:"gitignores,omitempty"`

	// Issue Label set to use
	IssueLabels string `json:"issue_labels,omitempty"`

	// License to use
	License string `json:"license,omitempty"`

	// Name of the repository to create
	// Required: true
	// Unique: true
	Name *string `json:"name"`

	// Whether the repository is private
	Private bool `json:"private,omitempty"`

	// Readme of the repository to create
	Readme string `json:"readme,omitempty"`
}

// Validate validates this create repo option
func (m *CreateRepoOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRepoOption) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRepoOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRepoOption) UnmarshalBinary(b []byte) error {
	var res CreateRepoOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
