// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateHookOption CreateHookOption options when create a hook
// swagger:model CreateHookOption
type CreateHookOption struct {

	// active
	Active *bool `json:"active,omitempty"`

	// branch filter
	BranchFilter string `json:"branch_filter,omitempty"`

	// config
	// Required: true
	Config map[string]string `json:"config"`

	// events
	Events []string `json:"events"`

	// type
	// Required: true
	// Enum: [gitea gogs slack discord]
	Type *string `json:"type"`
}

// Validate validates this create hook option
func (m *CreateHookOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateHookOption) validateConfig(formats strfmt.Registry) error {

	return nil
}

var createHookOptionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["gitea","gogs","slack","discord"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createHookOptionTypeTypePropEnum = append(createHookOptionTypeTypePropEnum, v)
	}
}

const (

	// CreateHookOptionTypeGitea captures enum value "gitea"
	CreateHookOptionTypeGitea string = "gitea"

	// CreateHookOptionTypeGogs captures enum value "gogs"
	CreateHookOptionTypeGogs string = "gogs"

	// CreateHookOptionTypeSlack captures enum value "slack"
	CreateHookOptionTypeSlack string = "slack"

	// CreateHookOptionTypeDiscord captures enum value "discord"
	CreateHookOptionTypeDiscord string = "discord"
)

// prop value enum
func (m *CreateHookOption) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createHookOptionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateHookOption) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateHookOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateHookOption) UnmarshalBinary(b []byte) error {
	var res CreateHookOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
