// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// IssueStartStopWatchReader is a Reader for the IssueStartStopWatch structure.
type IssueStartStopWatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueStartStopWatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIssueStartStopWatchCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueStartStopWatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIssueStartStopWatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewIssueStartStopWatchConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueStartStopWatchCreated creates a IssueStartStopWatchCreated with default headers values
func NewIssueStartStopWatchCreated() *IssueStartStopWatchCreated {
	return &IssueStartStopWatchCreated{}
}

/*IssueStartStopWatchCreated handles this case with default header values.

APIEmpty is an empty response
*/
type IssueStartStopWatchCreated struct {
}

func (o *IssueStartStopWatchCreated) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/start][%d] issueStartStopWatchCreated ", 201)
}

func (o *IssueStartStopWatchCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueStartStopWatchForbidden creates a IssueStartStopWatchForbidden with default headers values
func NewIssueStartStopWatchForbidden() *IssueStartStopWatchForbidden {
	return &IssueStartStopWatchForbidden{}
}

/*IssueStartStopWatchForbidden handles this case with default header values.

Not repo writer, user does not have rights to toggle stopwatch
*/
type IssueStartStopWatchForbidden struct {
}

func (o *IssueStartStopWatchForbidden) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/start][%d] issueStartStopWatchForbidden ", 403)
}

func (o *IssueStartStopWatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueStartStopWatchNotFound creates a IssueStartStopWatchNotFound with default headers values
func NewIssueStartStopWatchNotFound() *IssueStartStopWatchNotFound {
	return &IssueStartStopWatchNotFound{}
}

/*IssueStartStopWatchNotFound handles this case with default header values.

Issue not found
*/
type IssueStartStopWatchNotFound struct {
}

func (o *IssueStartStopWatchNotFound) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/start][%d] issueStartStopWatchNotFound ", 404)
}

func (o *IssueStartStopWatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueStartStopWatchConflict creates a IssueStartStopWatchConflict with default headers values
func NewIssueStartStopWatchConflict() *IssueStartStopWatchConflict {
	return &IssueStartStopWatchConflict{}
}

/*IssueStartStopWatchConflict handles this case with default header values.

Cannot start a stopwatch again if it already exists
*/
type IssueStartStopWatchConflict struct {
}

func (o *IssueStartStopWatchConflict) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/start][%d] issueStartStopWatchConflict ", 409)
}

func (o *IssueStartStopWatchConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
