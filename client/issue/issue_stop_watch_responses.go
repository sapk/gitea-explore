// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// IssueStopWatchReader is a Reader for the IssueStopWatch structure.
type IssueStopWatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueStopWatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIssueStopWatchCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueStopWatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIssueStopWatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewIssueStopWatchConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueStopWatchCreated creates a IssueStopWatchCreated with default headers values
func NewIssueStopWatchCreated() *IssueStopWatchCreated {
	return &IssueStopWatchCreated{}
}

/*IssueStopWatchCreated handles this case with default header values.

APIEmpty is an empty response
*/
type IssueStopWatchCreated struct {
}

func (o *IssueStopWatchCreated) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/stop][%d] issueStopWatchCreated ", 201)
}

func (o *IssueStopWatchCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueStopWatchForbidden creates a IssueStopWatchForbidden with default headers values
func NewIssueStopWatchForbidden() *IssueStopWatchForbidden {
	return &IssueStopWatchForbidden{}
}

/*IssueStopWatchForbidden handles this case with default header values.

Not repo writer, user does not have rights to toggle stopwatch
*/
type IssueStopWatchForbidden struct {
}

func (o *IssueStopWatchForbidden) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/stop][%d] issueStopWatchForbidden ", 403)
}

func (o *IssueStopWatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueStopWatchNotFound creates a IssueStopWatchNotFound with default headers values
func NewIssueStopWatchNotFound() *IssueStopWatchNotFound {
	return &IssueStopWatchNotFound{}
}

/*IssueStopWatchNotFound handles this case with default header values.

Issue not found
*/
type IssueStopWatchNotFound struct {
}

func (o *IssueStopWatchNotFound) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/stop][%d] issueStopWatchNotFound ", 404)
}

func (o *IssueStopWatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueStopWatchConflict creates a IssueStopWatchConflict with default headers values
func NewIssueStopWatchConflict() *IssueStopWatchConflict {
	return &IssueStopWatchConflict{}
}

/*IssueStopWatchConflict handles this case with default header values.

Cannot stop a non existent stopwatch
*/
type IssueStopWatchConflict struct {
}

func (o *IssueStopWatchConflict) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{index}/stopwatch/stop][%d] issueStopWatchConflict ", 409)
}

func (o *IssueStopWatchConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
