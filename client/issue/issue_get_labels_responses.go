// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "gitea.com/sapk/explore/models"
)

// IssueGetLabelsReader is a Reader for the IssueGetLabels structure.
type IssueGetLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueGetLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueGetLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIssueGetLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueGetLabelsOK creates a IssueGetLabelsOK with default headers values
func NewIssueGetLabelsOK() *IssueGetLabelsOK {
	return &IssueGetLabelsOK{}
}

/*IssueGetLabelsOK handles this case with default header values.

LabelList
*/
type IssueGetLabelsOK struct {
	Payload []*models.Label
}

func (o *IssueGetLabelsOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/{index}/labels][%d] issueGetLabelsOK  %+v", 200, o.Payload)
}

func (o *IssueGetLabelsOK) GetPayload() []*models.Label {
	return o.Payload
}

func (o *IssueGetLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueGetLabelsNotFound creates a IssueGetLabelsNotFound with default headers values
func NewIssueGetLabelsNotFound() *IssueGetLabelsNotFound {
	return &IssueGetLabelsNotFound{}
}

/*IssueGetLabelsNotFound handles this case with default header values.

APINotFound is a not found empty response
*/
type IssueGetLabelsNotFound struct {
}

func (o *IssueGetLabelsNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/{index}/labels][%d] issueGetLabelsNotFound ", 404)
}

func (o *IssueGetLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
