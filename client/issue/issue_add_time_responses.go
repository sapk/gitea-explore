// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "gitea.com/sapk/explore/models"
)

// IssueAddTimeReader is a Reader for the IssueAddTime structure.
type IssueAddTimeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueAddTimeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueAddTimeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIssueAddTimeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIssueAddTimeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueAddTimeOK creates a IssueAddTimeOK with default headers values
func NewIssueAddTimeOK() *IssueAddTimeOK {
	return &IssueAddTimeOK{}
}

/*IssueAddTimeOK handles this case with default header values.

TrackedTime
*/
type IssueAddTimeOK struct {
	Payload *models.TrackedTime
}

func (o *IssueAddTimeOK) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{id}/times][%d] issueAddTimeOK  %+v", 200, o.Payload)
}

func (o *IssueAddTimeOK) GetPayload() *models.TrackedTime {
	return o.Payload
}

func (o *IssueAddTimeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TrackedTime)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueAddTimeBadRequest creates a IssueAddTimeBadRequest with default headers values
func NewIssueAddTimeBadRequest() *IssueAddTimeBadRequest {
	return &IssueAddTimeBadRequest{}
}

/*IssueAddTimeBadRequest handles this case with default header values.

APIError is error format response
*/
type IssueAddTimeBadRequest struct {
	Message string

	URL string
}

func (o *IssueAddTimeBadRequest) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{id}/times][%d] issueAddTimeBadRequest ", 400)
}

func (o *IssueAddTimeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}

// NewIssueAddTimeForbidden creates a IssueAddTimeForbidden with default headers values
func NewIssueAddTimeForbidden() *IssueAddTimeForbidden {
	return &IssueAddTimeForbidden{}
}

/*IssueAddTimeForbidden handles this case with default header values.

APIError is error format response
*/
type IssueAddTimeForbidden struct {
	Message string

	URL string
}

func (o *IssueAddTimeForbidden) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/issues/{id}/times][%d] issueAddTimeForbidden ", 403)
}

func (o *IssueAddTimeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}
