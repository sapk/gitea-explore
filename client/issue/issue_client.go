// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new issue API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for issue API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
IssueAddLabel adds a label to an issue
*/
func (a *Client) IssueAddLabel(params *IssueAddLabelParams, authInfo runtime.ClientAuthInfoWriter) (*IssueAddLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueAddLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueAddLabel",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueAddLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueAddLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueAddLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueAddTime adds a tracked time to a issue
*/
func (a *Client) IssueAddTime(params *IssueAddTimeParams, authInfo runtime.ClientAuthInfoWriter) (*IssueAddTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueAddTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueAddTime",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/issues/{id}/times",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueAddTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueAddTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueAddTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueClearLabels removes all labels from an issue
*/
func (a *Client) IssueClearLabels(params *IssueClearLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*IssueClearLabelsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueClearLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueClearLabels",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueClearLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueClearLabelsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueClearLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueCreateComment adds a comment to an issue
*/
func (a *Client) IssueCreateComment(params *IssueCreateCommentParams, authInfo runtime.ClientAuthInfoWriter) (*IssueCreateCommentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueCreateCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueCreateComment",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueCreateCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueCreateCommentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueCreateComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueCreateIssue creates an issue if using deadline only the date will be taken into account and time of day ignored
*/
func (a *Client) IssueCreateIssue(params *IssueCreateIssueParams, authInfo runtime.ClientAuthInfoWriter) (*IssueCreateIssueCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueCreateIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueCreateIssue",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/issues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueCreateIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueCreateIssueCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueCreateIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueCreateLabel creates a label
*/
func (a *Client) IssueCreateLabel(params *IssueCreateLabelParams, authInfo runtime.ClientAuthInfoWriter) (*IssueCreateLabelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueCreateLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueCreateLabel",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueCreateLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueCreateLabelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueCreateLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueCreateMilestone creates a milestone
*/
func (a *Client) IssueCreateMilestone(params *IssueCreateMilestoneParams, authInfo runtime.ClientAuthInfoWriter) (*IssueCreateMilestoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueCreateMilestoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueCreateMilestone",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueCreateMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueCreateMilestoneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueCreateMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueDeleteComment deletes a comment
*/
func (a *Client) IssueDeleteComment(params *IssueDeleteCommentParams, authInfo runtime.ClientAuthInfoWriter) (*IssueDeleteCommentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueDeleteCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueDeleteComment",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/issues/comments/{id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueDeleteCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueDeleteCommentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueDeleteComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueDeleteCommentDeprecated deletes a comment
*/
func (a *Client) IssueDeleteCommentDeprecated(params *IssueDeleteCommentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter) (*IssueDeleteCommentDeprecatedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueDeleteCommentDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueDeleteCommentDeprecated",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/comments/{id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueDeleteCommentDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueDeleteCommentDeprecatedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueDeleteCommentDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueDeleteLabel deletes a label
*/
func (a *Client) IssueDeleteLabel(params *IssueDeleteLabelParams, authInfo runtime.ClientAuthInfoWriter) (*IssueDeleteLabelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueDeleteLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueDeleteLabel",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/labels/{id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueDeleteLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueDeleteLabelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueDeleteLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueDeleteMilestone deletes a milestone
*/
func (a *Client) IssueDeleteMilestone(params *IssueDeleteMilestoneParams, authInfo runtime.ClientAuthInfoWriter) (*IssueDeleteMilestoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueDeleteMilestoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueDeleteMilestone",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/milestones/{id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueDeleteMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueDeleteMilestoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueDeleteMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueEditComment edits a comment
*/
func (a *Client) IssueEditComment(params *IssueEditCommentParams, authInfo runtime.ClientAuthInfoWriter) (*IssueEditCommentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueEditCommentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueEditComment",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/issues/comments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueEditCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueEditCommentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueEditComment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueEditCommentDeprecated edits a comment
*/
func (a *Client) IssueEditCommentDeprecated(params *IssueEditCommentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter) (*IssueEditCommentDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueEditCommentDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueEditCommentDeprecated",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/comments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueEditCommentDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueEditCommentDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueEditCommentDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueEditIssue edits an issue if using deadline only the date will be taken into account and time of day ignored
*/
func (a *Client) IssueEditIssue(params *IssueEditIssueParams, authInfo runtime.ClientAuthInfoWriter) (*IssueEditIssueCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueEditIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueEditIssue",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueEditIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueEditIssueCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueEditIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueEditIssueDeadline sets an issue deadline if set to null the deadline is deleted if using deadline only the date will be taken into account and time of day ignored
*/
func (a *Client) IssueEditIssueDeadline(params *IssueEditIssueDeadlineParams, authInfo runtime.ClientAuthInfoWriter) (*IssueEditIssueDeadlineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueEditIssueDeadlineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueEditIssueDeadline",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/deadline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueEditIssueDeadlineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueEditIssueDeadlineCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueEditIssueDeadline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueEditLabel updates a label
*/
func (a *Client) IssueEditLabel(params *IssueEditLabelParams, authInfo runtime.ClientAuthInfoWriter) (*IssueEditLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueEditLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueEditLabel",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/labels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueEditLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueEditLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueEditLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueEditMilestone updates a milestone
*/
func (a *Client) IssueEditMilestone(params *IssueEditMilestoneParams, authInfo runtime.ClientAuthInfoWriter) (*IssueEditMilestoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueEditMilestoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueEditMilestone",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/milestones/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueEditMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueEditMilestoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueEditMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueGetComments lists all comments on an issue
*/
func (a *Client) IssueGetComments(params *IssueGetCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*IssueGetCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueGetCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueGetComments",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueGetCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueGetCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueGetComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueGetIssue gets an issue
*/
func (a *Client) IssueGetIssue(params *IssueGetIssueParams, authInfo runtime.ClientAuthInfoWriter) (*IssueGetIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueGetIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueGetIssue",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueGetIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueGetIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueGetIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueGetLabel gets a single label
*/
func (a *Client) IssueGetLabel(params *IssueGetLabelParams, authInfo runtime.ClientAuthInfoWriter) (*IssueGetLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueGetLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueGetLabel",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/labels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueGetLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueGetLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueGetLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueGetLabels gets an issue s labels
*/
func (a *Client) IssueGetLabels(params *IssueGetLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*IssueGetLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueGetLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueGetLabels",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueGetLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueGetLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueGetLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueGetMilestone gets a milestone
*/
func (a *Client) IssueGetMilestone(params *IssueGetMilestoneParams, authInfo runtime.ClientAuthInfoWriter) (*IssueGetMilestoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueGetMilestoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueGetMilestone",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/milestones/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueGetMilestoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueGetMilestoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueGetMilestone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueGetMilestonesList gets all of a repository s opened milestones
*/
func (a *Client) IssueGetMilestonesList(params *IssueGetMilestonesListParams, authInfo runtime.ClientAuthInfoWriter) (*IssueGetMilestonesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueGetMilestonesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueGetMilestonesList",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/milestones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueGetMilestonesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueGetMilestonesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueGetMilestonesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueGetRepoComments lists all comments in a repository
*/
func (a *Client) IssueGetRepoComments(params *IssueGetRepoCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*IssueGetRepoCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueGetRepoCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueGetRepoComments",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/issues/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueGetRepoCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueGetRepoCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueGetRepoComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueListIssues lists a repository s issues
*/
func (a *Client) IssueListIssues(params *IssueListIssuesParams, authInfo runtime.ClientAuthInfoWriter) (*IssueListIssuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueListIssuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueListIssues",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/issues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueListIssuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueListIssuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueListIssues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueListLabels gets all of a repository s labels
*/
func (a *Client) IssueListLabels(params *IssueListLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*IssueListLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueListLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueListLabels",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueListLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueListLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueListLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueRemoveLabel removes a label from an issue
*/
func (a *Client) IssueRemoveLabel(params *IssueRemoveLabelParams, authInfo runtime.ClientAuthInfoWriter) (*IssueRemoveLabelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueRemoveLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueRemoveLabel",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/labels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueRemoveLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueRemoveLabelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueRemoveLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueReplaceLabels replaces an issue s labels
*/
func (a *Client) IssueReplaceLabels(params *IssueReplaceLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*IssueReplaceLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueReplaceLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueReplaceLabels",
		Method:             "PUT",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueReplaceLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueReplaceLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueReplaceLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueStartStopWatch starts stopwatch on an issue
*/
func (a *Client) IssueStartStopWatch(params *IssueStartStopWatchParams, authInfo runtime.ClientAuthInfoWriter) (*IssueStartStopWatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueStartStopWatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueStartStopWatch",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/stopwatch/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueStartStopWatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueStartStopWatchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueStartStopWatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueStopWatch stops an issue s existing stopwatch
*/
func (a *Client) IssueStopWatch(params *IssueStopWatchParams, authInfo runtime.ClientAuthInfoWriter) (*IssueStopWatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueStopWatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueStopWatch",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/issues/{index}/stopwatch/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueStopWatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueStopWatchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueStopWatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueTrackedTimes lists an issue s tracked times
*/
func (a *Client) IssueTrackedTimes(params *IssueTrackedTimesParams, authInfo runtime.ClientAuthInfoWriter) (*IssueTrackedTimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueTrackedTimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "issueTrackedTimes",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/issues/{id}/times",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IssueTrackedTimesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueTrackedTimesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueTrackedTimes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
