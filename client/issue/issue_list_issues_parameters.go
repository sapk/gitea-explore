// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewIssueListIssuesParams creates a new IssueListIssuesParams object
// with the default values initialized.
func NewIssueListIssuesParams() *IssueListIssuesParams {
	var ()
	return &IssueListIssuesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIssueListIssuesParamsWithTimeout creates a new IssueListIssuesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIssueListIssuesParamsWithTimeout(timeout time.Duration) *IssueListIssuesParams {
	var ()
	return &IssueListIssuesParams{

		timeout: timeout,
	}
}

// NewIssueListIssuesParamsWithContext creates a new IssueListIssuesParams object
// with the default values initialized, and the ability to set a context for a request
func NewIssueListIssuesParamsWithContext(ctx context.Context) *IssueListIssuesParams {
	var ()
	return &IssueListIssuesParams{

		Context: ctx,
	}
}

// NewIssueListIssuesParamsWithHTTPClient creates a new IssueListIssuesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIssueListIssuesParamsWithHTTPClient(client *http.Client) *IssueListIssuesParams {
	var ()
	return &IssueListIssuesParams{
		HTTPClient: client,
	}
}

/*IssueListIssuesParams contains all the parameters to send to the API endpoint
for the issue list issues operation typically these are written to a http.Request
*/
type IssueListIssuesParams struct {

	/*Labels
	  comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded

	*/
	Labels *string
	/*Owner
	  owner of the repo

	*/
	Owner string
	/*Page
	  page number of requested issues

	*/
	Page *int64
	/*Q
	  search string

	*/
	Q *string
	/*Repo
	  name of the repo

	*/
	Repo string
	/*State
	  whether issue is open or closed

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the issue list issues params
func (o *IssueListIssuesParams) WithTimeout(timeout time.Duration) *IssueListIssuesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the issue list issues params
func (o *IssueListIssuesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the issue list issues params
func (o *IssueListIssuesParams) WithContext(ctx context.Context) *IssueListIssuesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the issue list issues params
func (o *IssueListIssuesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the issue list issues params
func (o *IssueListIssuesParams) WithHTTPClient(client *http.Client) *IssueListIssuesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the issue list issues params
func (o *IssueListIssuesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLabels adds the labels to the issue list issues params
func (o *IssueListIssuesParams) WithLabels(labels *string) *IssueListIssuesParams {
	o.SetLabels(labels)
	return o
}

// SetLabels adds the labels to the issue list issues params
func (o *IssueListIssuesParams) SetLabels(labels *string) {
	o.Labels = labels
}

// WithOwner adds the owner to the issue list issues params
func (o *IssueListIssuesParams) WithOwner(owner string) *IssueListIssuesParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the issue list issues params
func (o *IssueListIssuesParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithPage adds the page to the issue list issues params
func (o *IssueListIssuesParams) WithPage(page *int64) *IssueListIssuesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the issue list issues params
func (o *IssueListIssuesParams) SetPage(page *int64) {
	o.Page = page
}

// WithQ adds the q to the issue list issues params
func (o *IssueListIssuesParams) WithQ(q *string) *IssueListIssuesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the issue list issues params
func (o *IssueListIssuesParams) SetQ(q *string) {
	o.Q = q
}

// WithRepo adds the repo to the issue list issues params
func (o *IssueListIssuesParams) WithRepo(repo string) *IssueListIssuesParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the issue list issues params
func (o *IssueListIssuesParams) SetRepo(repo string) {
	o.Repo = repo
}

// WithState adds the state to the issue list issues params
func (o *IssueListIssuesParams) WithState(state *string) *IssueListIssuesParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the issue list issues params
func (o *IssueListIssuesParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *IssueListIssuesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Labels != nil {

		// query param labels
		var qrLabels string
		if o.Labels != nil {
			qrLabels = *o.Labels
		}
		qLabels := qrLabels
		if qLabels != "" {
			if err := r.SetQueryParam("labels", qLabels); err != nil {
				return err
			}
		}

	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
