// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "gitea.com/sapk/explore/models"
)

// NewRepoEditReleaseAttachmentParams creates a new RepoEditReleaseAttachmentParams object
// with the default values initialized.
func NewRepoEditReleaseAttachmentParams() *RepoEditReleaseAttachmentParams {
	var ()
	return &RepoEditReleaseAttachmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRepoEditReleaseAttachmentParamsWithTimeout creates a new RepoEditReleaseAttachmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRepoEditReleaseAttachmentParamsWithTimeout(timeout time.Duration) *RepoEditReleaseAttachmentParams {
	var ()
	return &RepoEditReleaseAttachmentParams{

		timeout: timeout,
	}
}

// NewRepoEditReleaseAttachmentParamsWithContext creates a new RepoEditReleaseAttachmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewRepoEditReleaseAttachmentParamsWithContext(ctx context.Context) *RepoEditReleaseAttachmentParams {
	var ()
	return &RepoEditReleaseAttachmentParams{

		Context: ctx,
	}
}

// NewRepoEditReleaseAttachmentParamsWithHTTPClient creates a new RepoEditReleaseAttachmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRepoEditReleaseAttachmentParamsWithHTTPClient(client *http.Client) *RepoEditReleaseAttachmentParams {
	var ()
	return &RepoEditReleaseAttachmentParams{
		HTTPClient: client,
	}
}

/*RepoEditReleaseAttachmentParams contains all the parameters to send to the API endpoint
for the repo edit release attachment operation typically these are written to a http.Request
*/
type RepoEditReleaseAttachmentParams struct {

	/*AttachmentID
	  id of the attachment to edit

	*/
	AttachmentID int64
	/*Body*/
	Body *models.EditAttachmentOptions
	/*ID
	  id of the release

	*/
	ID int64
	/*Owner
	  owner of the repo

	*/
	Owner string
	/*Repo
	  name of the repo

	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithTimeout(timeout time.Duration) *RepoEditReleaseAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithContext(ctx context.Context) *RepoEditReleaseAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithHTTPClient(client *http.Client) *RepoEditReleaseAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttachmentID adds the attachmentID to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithAttachmentID(attachmentID int64) *RepoEditReleaseAttachmentParams {
	o.SetAttachmentID(attachmentID)
	return o
}

// SetAttachmentID adds the attachmentId to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetAttachmentID(attachmentID int64) {
	o.AttachmentID = attachmentID
}

// WithBody adds the body to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithBody(body *models.EditAttachmentOptions) *RepoEditReleaseAttachmentParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetBody(body *models.EditAttachmentOptions) {
	o.Body = body
}

// WithID adds the id to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithID(id int64) *RepoEditReleaseAttachmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetID(id int64) {
	o.ID = id
}

// WithOwner adds the owner to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithOwner(owner string) *RepoEditReleaseAttachmentParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRepo adds the repo to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) WithRepo(repo string) *RepoEditReleaseAttachmentParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo edit release attachment params
func (o *RepoEditReleaseAttachmentParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *RepoEditReleaseAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param attachment_id
	if err := r.SetPathParam("attachment_id", swag.FormatInt64(o.AttachmentID)); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
