// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "gitea.com/sapk/explore/models"
)

// RepoEditGitHookReader is a Reader for the RepoEditGitHook structure.
type RepoEditGitHookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoEditGitHookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoEditGitHookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoEditGitHookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoEditGitHookOK creates a RepoEditGitHookOK with default headers values
func NewRepoEditGitHookOK() *RepoEditGitHookOK {
	return &RepoEditGitHookOK{}
}

/*RepoEditGitHookOK handles this case with default header values.

GitHook
*/
type RepoEditGitHookOK struct {
	Payload *models.GitHook
}

func (o *RepoEditGitHookOK) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/hooks/git/{id}][%d] repoEditGitHookOK  %+v", 200, o.Payload)
}

func (o *RepoEditGitHookOK) GetPayload() *models.GitHook {
	return o.Payload
}

func (o *RepoEditGitHookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitHook)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoEditGitHookNotFound creates a RepoEditGitHookNotFound with default headers values
func NewRepoEditGitHookNotFound() *RepoEditGitHookNotFound {
	return &RepoEditGitHookNotFound{}
}

/*RepoEditGitHookNotFound handles this case with default header values.

APINotFound is a not found empty response
*/
type RepoEditGitHookNotFound struct {
}

func (o *RepoEditGitHookNotFound) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/hooks/git/{id}][%d] repoEditGitHookNotFound ", 404)
}

func (o *RepoEditGitHookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
