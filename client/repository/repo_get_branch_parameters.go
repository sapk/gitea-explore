// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRepoGetBranchParams creates a new RepoGetBranchParams object
// with the default values initialized.
func NewRepoGetBranchParams() *RepoGetBranchParams {
	var ()
	return &RepoGetBranchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRepoGetBranchParamsWithTimeout creates a new RepoGetBranchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRepoGetBranchParamsWithTimeout(timeout time.Duration) *RepoGetBranchParams {
	var ()
	return &RepoGetBranchParams{

		timeout: timeout,
	}
}

// NewRepoGetBranchParamsWithContext creates a new RepoGetBranchParams object
// with the default values initialized, and the ability to set a context for a request
func NewRepoGetBranchParamsWithContext(ctx context.Context) *RepoGetBranchParams {
	var ()
	return &RepoGetBranchParams{

		Context: ctx,
	}
}

// NewRepoGetBranchParamsWithHTTPClient creates a new RepoGetBranchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRepoGetBranchParamsWithHTTPClient(client *http.Client) *RepoGetBranchParams {
	var ()
	return &RepoGetBranchParams{
		HTTPClient: client,
	}
}

/*RepoGetBranchParams contains all the parameters to send to the API endpoint
for the repo get branch operation typically these are written to a http.Request
*/
type RepoGetBranchParams struct {

	/*Branch
	  branch to get

	*/
	Branch string
	/*Owner
	  owner of the repo

	*/
	Owner string
	/*Repo
	  name of the repo

	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repo get branch params
func (o *RepoGetBranchParams) WithTimeout(timeout time.Duration) *RepoGetBranchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo get branch params
func (o *RepoGetBranchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo get branch params
func (o *RepoGetBranchParams) WithContext(ctx context.Context) *RepoGetBranchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo get branch params
func (o *RepoGetBranchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo get branch params
func (o *RepoGetBranchParams) WithHTTPClient(client *http.Client) *RepoGetBranchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo get branch params
func (o *RepoGetBranchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the repo get branch params
func (o *RepoGetBranchParams) WithBranch(branch string) *RepoGetBranchParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the repo get branch params
func (o *RepoGetBranchParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithOwner adds the owner to the repo get branch params
func (o *RepoGetBranchParams) WithOwner(owner string) *RepoGetBranchParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo get branch params
func (o *RepoGetBranchParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRepo adds the repo to the repo get branch params
func (o *RepoGetBranchParams) WithRepo(repo string) *RepoGetBranchParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo get branch params
func (o *RepoGetBranchParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *RepoGetBranchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
