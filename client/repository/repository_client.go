// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new repository API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repository API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetBlob gets the blob of a repository
*/
func (a *Client) GetBlob(params *GetBlobParams, authInfo runtime.ClientAuthInfoWriter) (*GetBlobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBlob",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/git/blobs/{sha}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBlob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTag gets the tag object of an annotated tag not lightweight tags
*/
func (a *Client) GetTag(params *GetTagParams, authInfo runtime.ClientAuthInfoWriter) (*GetTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTag",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/git/tags/{sha}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTree gets the tree of a repository
*/
func (a *Client) GetTree(params *GetTreeParams, authInfo runtime.ClientAuthInfoWriter) (*GetTreeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTree",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/git/trees/{sha}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTreeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCurrentUserRepo creates a repository
*/
func (a *Client) CreateCurrentUserRepo(params *CreateCurrentUserRepoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCurrentUserRepoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCurrentUserRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCurrentUserRepo",
		Method:             "POST",
		PathPattern:        "/user/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCurrentUserRepoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCurrentUserRepoCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCurrentUserRepo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFork forks a repository
*/
func (a *Client) CreateFork(params *CreateForkParams, authInfo runtime.ClientAuthInfoWriter) (*CreateForkAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateForkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFork",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/forks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateForkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateForkAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListForks lists a repository s forks
*/
func (a *Client) ListForks(params *ListForksParams, authInfo runtime.ClientAuthInfoWriter) (*ListForksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListForksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listForks",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/forks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListForksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListForksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listForks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoAddCollaborator adds a collaborator to a repository
*/
func (a *Client) RepoAddCollaborator(params *RepoAddCollaboratorParams, authInfo runtime.ClientAuthInfoWriter) (*RepoAddCollaboratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoAddCollaboratorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoAddCollaborator",
		Method:             "PUT",
		PathPattern:        "/repos/{owner}/{repo}/collaborators/{collaborator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoAddCollaboratorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoAddCollaboratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoAddCollaborator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoAddTopíc adds a topic to a repository
*/
func (a *Client) RepoAddTopíc(params *RepoAddTopícParams, authInfo runtime.ClientAuthInfoWriter) (*RepoAddTopícNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoAddTopícParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoAddTopíc",
		Method:             "PUT",
		PathPattern:        "/repos/{owner}/{repo}/topics/{topic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoAddTopícReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoAddTopícNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoAddTopíc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCheckCollaborator checks if a user is a collaborator of a repository
*/
func (a *Client) RepoCheckCollaborator(params *RepoCheckCollaboratorParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCheckCollaboratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCheckCollaboratorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCheckCollaborator",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/collaborators/{collaborator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCheckCollaboratorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCheckCollaboratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCheckCollaborator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCreateFile creates a file in a repository
*/
func (a *Client) RepoCreateFile(params *RepoCreateFileParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCreateFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCreateFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCreateFile",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/contents/{filepath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCreateFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCreateFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCreateFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCreateHook creates a hook
*/
func (a *Client) RepoCreateHook(params *RepoCreateHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCreateHookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCreateHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCreateHook",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCreateHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCreateHookCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCreateHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCreateKey adds a key to a repository
*/
func (a *Client) RepoCreateKey(params *RepoCreateKeyParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCreateKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCreateKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCreateKey",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCreateKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCreateKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCreateKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCreatePullRequest creates a pull request
*/
func (a *Client) RepoCreatePullRequest(params *RepoCreatePullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCreatePullRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCreatePullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCreatePullRequest",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/pulls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCreatePullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCreatePullRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCreatePullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCreateRelease creates a release
*/
func (a *Client) RepoCreateRelease(params *RepoCreateReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCreateReleaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCreateReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCreateRelease",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCreateReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCreateReleaseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCreateRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCreateReleaseAttachment creates a release attachment
*/
func (a *Client) RepoCreateReleaseAttachment(params *RepoCreateReleaseAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCreateReleaseAttachmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCreateReleaseAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCreateReleaseAttachment",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}/assets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCreateReleaseAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCreateReleaseAttachmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCreateReleaseAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoCreateStatus creates a commit status
*/
func (a *Client) RepoCreateStatus(params *RepoCreateStatusParams, authInfo runtime.ClientAuthInfoWriter) (*RepoCreateStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoCreateStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoCreateStatus",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/statuses/{sha}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoCreateStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoCreateStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoCreateStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDelete deletes a repository
*/
func (a *Client) RepoDelete(params *RepoDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDelete",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteCollaborator deletes a collaborator from a repository
*/
func (a *Client) RepoDeleteCollaborator(params *RepoDeleteCollaboratorParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteCollaboratorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteCollaboratorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteCollaborator",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/collaborators/{collaborator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteCollaboratorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteCollaboratorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteCollaborator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteFile deletes a file in a repository
*/
func (a *Client) RepoDeleteFile(params *RepoDeleteFileParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteFile",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/contents/{filepath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteGitHook deletes a git hook in a repository
*/
func (a *Client) RepoDeleteGitHook(params *RepoDeleteGitHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteGitHookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteGitHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteGitHook",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/hooks/git/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteGitHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteGitHookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteGitHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteHook deletes a hook in a repository
*/
func (a *Client) RepoDeleteHook(params *RepoDeleteHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteHookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteHook",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteHookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteKey deletes a key from a repository
*/
func (a *Client) RepoDeleteKey(params *RepoDeleteKeyParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteKey",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/keys/{id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteRelease deletes a release
*/
func (a *Client) RepoDeleteRelease(params *RepoDeleteReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteReleaseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteRelease",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteReleaseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteReleaseAttachment deletes a release attachment
*/
func (a *Client) RepoDeleteReleaseAttachment(params *RepoDeleteReleaseAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteReleaseAttachmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteReleaseAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteReleaseAttachment",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteReleaseAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteReleaseAttachmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteReleaseAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoDeleteTopic deletes a topic from a repository
*/
func (a *Client) RepoDeleteTopic(params *RepoDeleteTopicParams, authInfo runtime.ClientAuthInfoWriter) (*RepoDeleteTopicNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoDeleteTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoDeleteTopic",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/topics/{topic}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoDeleteTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoDeleteTopicNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoDeleteTopic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoEdit edits a repository s properties only fields that are set will be changed
*/
func (a *Client) RepoEdit(params *RepoEditParams, authInfo runtime.ClientAuthInfoWriter) (*RepoEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoEditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoEdit",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoEdit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoEditGitHook edits a git hook in a repository
*/
func (a *Client) RepoEditGitHook(params *RepoEditGitHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoEditGitHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoEditGitHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoEditGitHook",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/hooks/git/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoEditGitHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoEditGitHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoEditGitHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoEditHook edits a hook in a repository
*/
func (a *Client) RepoEditHook(params *RepoEditHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoEditHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoEditHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoEditHook",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoEditHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoEditHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoEditHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoEditPullRequest updates a pull request
*/
func (a *Client) RepoEditPullRequest(params *RepoEditPullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*RepoEditPullRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoEditPullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoEditPullRequest",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/pulls/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoEditPullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoEditPullRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoEditPullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoEditRelease updates a release
*/
func (a *Client) RepoEditRelease(params *RepoEditReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*RepoEditReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoEditReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoEditRelease",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoEditReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoEditReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoEditRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoEditReleaseAttachment edits a release attachment
*/
func (a *Client) RepoEditReleaseAttachment(params *RepoEditReleaseAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*RepoEditReleaseAttachmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoEditReleaseAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoEditReleaseAttachment",
		Method:             "PATCH",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoEditReleaseAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoEditReleaseAttachmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoEditReleaseAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGet gets a repository
*/
func (a *Client) RepoGet(params *RepoGetParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGet",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetAllCommits gets a list of all commits from a repository
*/
func (a *Client) RepoGetAllCommits(params *RepoGetAllCommitsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetAllCommitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetAllCommitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetAllCommits",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/commits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetAllCommitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetAllCommitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetAllCommits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetArchive gets an archive of a repository
*/
func (a *Client) RepoGetArchive(params *RepoGetArchiveParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetArchive",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/archive/{archive}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetArchiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetBranch retrieves a specific branch from a repository
*/
func (a *Client) RepoGetBranch(params *RepoGetBranchParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetBranchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetBranch",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/branches/{branch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetBranchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetByID gets a repository by id
*/
func (a *Client) RepoGetByID(params *RepoGetByIDParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetByID",
		Method:             "GET",
		PathPattern:        "/repositories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetCombinedStatusByRef gets a commit s combined status by branch tag commit reference
*/
func (a *Client) RepoGetCombinedStatusByRef(params *RepoGetCombinedStatusByRefParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetCombinedStatusByRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetCombinedStatusByRefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetCombinedStatusByRef",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/commits/{ref}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetCombinedStatusByRefReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetCombinedStatusByRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetCombinedStatusByRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetContents gets the metadata and contents if a file of an entry in a repository or a list of entries if a dir
*/
func (a *Client) RepoGetContents(params *RepoGetContentsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetContentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetContents",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/contents/{filepath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetContentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetContentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetContents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetContentsList gets the metadata of all the entries of the root dir
*/
func (a *Client) RepoGetContentsList(params *RepoGetContentsListParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetContentsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetContentsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetContentsList",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetContentsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetContentsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetContentsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetEditorConfig gets the editor config definitions of a file in a repository
*/
func (a *Client) RepoGetEditorConfig(params *RepoGetEditorConfigParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetEditorConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetEditorConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetEditorConfig",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/editorconfig/{filepath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetEditorConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetEditorConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetEditorConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetGitHook gets a git hook
*/
func (a *Client) RepoGetGitHook(params *RepoGetGitHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetGitHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetGitHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetGitHook",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/hooks/git/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetGitHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetGitHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetGitHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetHook gets a hook
*/
func (a *Client) RepoGetHook(params *RepoGetHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetHook",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetKey gets a repository s key by id
*/
func (a *Client) RepoGetKey(params *RepoGetKeyParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetKey",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetPullRequest gets a pull request
*/
func (a *Client) RepoGetPullRequest(params *RepoGetPullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetPullRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetPullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetPullRequest",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/pulls/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetPullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetPullRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetPullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetRawFile gets a file from a repository
*/
func (a *Client) RepoGetRawFile(params *RepoGetRawFileParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetRawFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetRawFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetRawFile",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/raw/{filepath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetRawFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetRawFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetRawFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetRelease gets a release
*/
func (a *Client) RepoGetRelease(params *RepoGetReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetRelease",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetReleaseAttachment gets a release attachment
*/
func (a *Client) RepoGetReleaseAttachment(params *RepoGetReleaseAttachmentParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetReleaseAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetReleaseAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetReleaseAttachment",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetReleaseAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetReleaseAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetReleaseAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoGetSingleCommit gets a single commit from a repository
*/
func (a *Client) RepoGetSingleCommit(params *RepoGetSingleCommitParams, authInfo runtime.ClientAuthInfoWriter) (*RepoGetSingleCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoGetSingleCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoGetSingleCommit",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/git/commits/{sha}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoGetSingleCommitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoGetSingleCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoGetSingleCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListAllGitRefs gets specified ref or filtered repository s refs
*/
func (a *Client) RepoListAllGitRefs(params *RepoListAllGitRefsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListAllGitRefsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListAllGitRefsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListAllGitRefs",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/git/refs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListAllGitRefsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListAllGitRefsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListAllGitRefs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListBranches lists a repository s branches
*/
func (a *Client) RepoListBranches(params *RepoListBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListBranchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListBranches",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListBranchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListCollaborators lists a repository s collaborators
*/
func (a *Client) RepoListCollaborators(params *RepoListCollaboratorsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListCollaboratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListCollaboratorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListCollaborators",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/collaborators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListCollaboratorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListCollaboratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListCollaborators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListGitHooks lists the git hooks in a repository
*/
func (a *Client) RepoListGitHooks(params *RepoListGitHooksParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListGitHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListGitHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListGitHooks",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/hooks/git",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListGitHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListGitHooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListGitHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListGitRefs gets specified ref or filtered repository s refs
*/
func (a *Client) RepoListGitRefs(params *RepoListGitRefsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListGitRefsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListGitRefsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListGitRefs",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/git/refs/{ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListGitRefsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListGitRefsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListGitRefs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListHooks lists the hooks in a repository
*/
func (a *Client) RepoListHooks(params *RepoListHooksParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListHooks",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListHooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListKeys lists a repository s keys
*/
func (a *Client) RepoListKeys(params *RepoListKeysParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListKeys",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListPullRequests lists a repo s pull requests
*/
func (a *Client) RepoListPullRequests(params *RepoListPullRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListPullRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListPullRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListPullRequests",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/pulls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListPullRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListPullRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListPullRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListReleaseAttachments lists release s attachments
*/
func (a *Client) RepoListReleaseAttachments(params *RepoListReleaseAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListReleaseAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListReleaseAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListReleaseAttachments",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/releases/{id}/assets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListReleaseAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListReleaseAttachmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListReleaseAttachments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListReleases lists a repo s releases
*/
func (a *Client) RepoListReleases(params *RepoListReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListReleasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListReleases",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListStargazers lists a repo s stargazers
*/
func (a *Client) RepoListStargazers(params *RepoListStargazersParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListStargazersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListStargazersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListStargazers",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/stargazers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListStargazersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListStargazersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListStargazers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListStatuses gets a commit s statuses
*/
func (a *Client) RepoListStatuses(params *RepoListStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListStatuses",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/statuses/{sha}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListSubscribers lists a repo s watchers
*/
func (a *Client) RepoListSubscribers(params *RepoListSubscribersParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListSubscribersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListSubscribersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListSubscribers",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListSubscribersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListSubscribersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListSubscribers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListTags lists a repository s tags
*/
func (a *Client) RepoListTags(params *RepoListTagsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListTags",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoListTopics gets list of topics that a repository has
*/
func (a *Client) RepoListTopics(params *RepoListTopicsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoListTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoListTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoListTopics",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/topics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoListTopicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoListTopicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoListTopics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoMergePullRequest merges a pull request
*/
func (a *Client) RepoMergePullRequest(params *RepoMergePullRequestParams, authInfo runtime.ClientAuthInfoWriter) (*RepoMergePullRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoMergePullRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoMergePullRequest",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/pulls/{index}/merge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoMergePullRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoMergePullRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoMergePullRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoMigrate migrates a remote git repository
*/
func (a *Client) RepoMigrate(params *RepoMigrateParams, authInfo runtime.ClientAuthInfoWriter) (*RepoMigrateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoMigrateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoMigrate",
		Method:             "POST",
		PathPattern:        "/repos/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoMigrateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoMigrateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoMirrorSync syncs a mirrored repository
*/
func (a *Client) RepoMirrorSync(params *RepoMirrorSyncParams, authInfo runtime.ClientAuthInfoWriter) (*RepoMirrorSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoMirrorSyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoMirrorSync",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/mirror-sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoMirrorSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoMirrorSyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoMirrorSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoPullRequestIsMerged checks if a pull request has been merged
*/
func (a *Client) RepoPullRequestIsMerged(params *RepoPullRequestIsMergedParams, authInfo runtime.ClientAuthInfoWriter) (*RepoPullRequestIsMergedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoPullRequestIsMergedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoPullRequestIsMerged",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/pulls/{index}/merge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoPullRequestIsMergedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoPullRequestIsMergedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoPullRequestIsMerged: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoSearch searches for repositories
*/
func (a *Client) RepoSearch(params *RepoSearchParams, authInfo runtime.ClientAuthInfoWriter) (*RepoSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoSearch",
		Method:             "GET",
		PathPattern:        "/repos/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoSigningKey gets signing key gpg for given repository
*/
func (a *Client) RepoSigningKey(params *RepoSigningKeyParams, authInfo runtime.ClientAuthInfoWriter) (*RepoSigningKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoSigningKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoSigningKey",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/signing-key.gpg",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoSigningKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoSigningKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoSigningKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoTestHook tests a push webhook
*/
func (a *Client) RepoTestHook(params *RepoTestHookParams, authInfo runtime.ClientAuthInfoWriter) (*RepoTestHookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoTestHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoTestHook",
		Method:             "POST",
		PathPattern:        "/repos/{owner}/{repo}/hooks/{id}/tests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoTestHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoTestHookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoTestHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoTrackedTimes lists a repo s tracked times
*/
func (a *Client) RepoTrackedTimes(params *RepoTrackedTimesParams, authInfo runtime.ClientAuthInfoWriter) (*RepoTrackedTimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoTrackedTimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoTrackedTimes",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/times",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoTrackedTimesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoTrackedTimesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoTrackedTimes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoUpdateFile updates a file in a repository
*/
func (a *Client) RepoUpdateFile(params *RepoUpdateFileParams, authInfo runtime.ClientAuthInfoWriter) (*RepoUpdateFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoUpdateFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoUpdateFile",
		Method:             "PUT",
		PathPattern:        "/repos/{owner}/{repo}/contents/{filepath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoUpdateFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoUpdateFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoUpdateFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RepoUpdateTopics replaces list of topics for a repository
*/
func (a *Client) RepoUpdateTopics(params *RepoUpdateTopicsParams, authInfo runtime.ClientAuthInfoWriter) (*RepoUpdateTopicsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepoUpdateTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repoUpdateTopics",
		Method:             "PUT",
		PathPattern:        "/repos/{owner}/{repo}/topics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepoUpdateTopicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepoUpdateTopicsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repoUpdateTopics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TopicSearch searches topics via keyword
*/
func (a *Client) TopicSearch(params *TopicSearchParams, authInfo runtime.ClientAuthInfoWriter) (*TopicSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTopicSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "topicSearch",
		Method:             "GET",
		PathPattern:        "/topics/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TopicSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TopicSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for topicSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserCurrentCheckSubscription checks if the current user is watching a repo
*/
func (a *Client) UserCurrentCheckSubscription(params *UserCurrentCheckSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*UserCurrentCheckSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCurrentCheckSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCurrentCheckSubscription",
		Method:             "GET",
		PathPattern:        "/repos/{owner}/{repo}/subscription",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserCurrentCheckSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCurrentCheckSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCurrentCheckSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserCurrentDeleteSubscription unwatches a repo
*/
func (a *Client) UserCurrentDeleteSubscription(params *UserCurrentDeleteSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*UserCurrentDeleteSubscriptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCurrentDeleteSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCurrentDeleteSubscription",
		Method:             "DELETE",
		PathPattern:        "/repos/{owner}/{repo}/subscription",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserCurrentDeleteSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCurrentDeleteSubscriptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCurrentDeleteSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UserCurrentPutSubscription watches a repo
*/
func (a *Client) UserCurrentPutSubscription(params *UserCurrentPutSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*UserCurrentPutSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCurrentPutSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCurrentPutSubscription",
		Method:             "PUT",
		PathPattern:        "/repos/{owner}/{repo}/subscription",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserCurrentPutSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCurrentPutSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCurrentPutSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
