// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRepoGetAllCommitsParams creates a new RepoGetAllCommitsParams object
// with the default values initialized.
func NewRepoGetAllCommitsParams() *RepoGetAllCommitsParams {
	var ()
	return &RepoGetAllCommitsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRepoGetAllCommitsParamsWithTimeout creates a new RepoGetAllCommitsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRepoGetAllCommitsParamsWithTimeout(timeout time.Duration) *RepoGetAllCommitsParams {
	var ()
	return &RepoGetAllCommitsParams{

		timeout: timeout,
	}
}

// NewRepoGetAllCommitsParamsWithContext creates a new RepoGetAllCommitsParams object
// with the default values initialized, and the ability to set a context for a request
func NewRepoGetAllCommitsParamsWithContext(ctx context.Context) *RepoGetAllCommitsParams {
	var ()
	return &RepoGetAllCommitsParams{

		Context: ctx,
	}
}

// NewRepoGetAllCommitsParamsWithHTTPClient creates a new RepoGetAllCommitsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRepoGetAllCommitsParamsWithHTTPClient(client *http.Client) *RepoGetAllCommitsParams {
	var ()
	return &RepoGetAllCommitsParams{
		HTTPClient: client,
	}
}

/*RepoGetAllCommitsParams contains all the parameters to send to the API endpoint
for the repo get all commits operation typically these are written to a http.Request
*/
type RepoGetAllCommitsParams struct {

	/*Owner
	  owner of the repo

	*/
	Owner string
	/*Page
	  page number of requested commits

	*/
	Page *int64
	/*Repo
	  name of the repo

	*/
	Repo string
	/*Sha
	  SHA or branch to start listing commits from (usually 'master')

	*/
	Sha *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithTimeout(timeout time.Duration) *RepoGetAllCommitsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithContext(ctx context.Context) *RepoGetAllCommitsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithHTTPClient(client *http.Client) *RepoGetAllCommitsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOwner adds the owner to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithOwner(owner string) *RepoGetAllCommitsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithPage adds the page to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithPage(page *int64) *RepoGetAllCommitsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetPage(page *int64) {
	o.Page = page
}

// WithRepo adds the repo to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithRepo(repo string) *RepoGetAllCommitsParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetRepo(repo string) {
	o.Repo = repo
}

// WithSha adds the sha to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithSha(sha *string) *RepoGetAllCommitsParams {
	o.SetSha(sha)
	return o
}

// SetSha adds the sha to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetSha(sha *string) {
	o.Sha = sha
}

// WriteToRequest writes these params to a swagger request
func (o *RepoGetAllCommitsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if o.Sha != nil {

		// query param sha
		var qrSha string
		if o.Sha != nil {
			qrSha = *o.Sha
		}
		qSha := qrSha
		if qSha != "" {
			if err := r.SetQueryParam("sha", qSha); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
