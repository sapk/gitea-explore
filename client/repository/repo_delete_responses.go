// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// RepoDeleteReader is a Reader for the RepoDelete structure.
type RepoDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRepoDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRepoDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoDeleteNoContent creates a RepoDeleteNoContent with default headers values
func NewRepoDeleteNoContent() *RepoDeleteNoContent {
	return &RepoDeleteNoContent{}
}

/*RepoDeleteNoContent handles this case with default header values.

APIEmpty is an empty response
*/
type RepoDeleteNoContent struct {
}

func (o *RepoDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}][%d] repoDeleteNoContent ", 204)
}

func (o *RepoDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepoDeleteForbidden creates a RepoDeleteForbidden with default headers values
func NewRepoDeleteForbidden() *RepoDeleteForbidden {
	return &RepoDeleteForbidden{}
}

/*RepoDeleteForbidden handles this case with default header values.

APIForbiddenError is a forbidden error response
*/
type RepoDeleteForbidden struct {
	Message string

	URL string
}

func (o *RepoDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}][%d] repoDeleteForbidden ", 403)
}

func (o *RepoDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}
