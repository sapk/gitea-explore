// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListForksParams creates a new ListForksParams object
// with the default values initialized.
func NewListForksParams() *ListForksParams {
	var ()
	return &ListForksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListForksParamsWithTimeout creates a new ListForksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListForksParamsWithTimeout(timeout time.Duration) *ListForksParams {
	var ()
	return &ListForksParams{

		timeout: timeout,
	}
}

// NewListForksParamsWithContext creates a new ListForksParams object
// with the default values initialized, and the ability to set a context for a request
func NewListForksParamsWithContext(ctx context.Context) *ListForksParams {
	var ()
	return &ListForksParams{

		Context: ctx,
	}
}

// NewListForksParamsWithHTTPClient creates a new ListForksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListForksParamsWithHTTPClient(client *http.Client) *ListForksParams {
	var ()
	return &ListForksParams{
		HTTPClient: client,
	}
}

/*ListForksParams contains all the parameters to send to the API endpoint
for the list forks operation typically these are written to a http.Request
*/
type ListForksParams struct {

	/*Owner
	  owner of the repo

	*/
	Owner string
	/*Repo
	  name of the repo

	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list forks params
func (o *ListForksParams) WithTimeout(timeout time.Duration) *ListForksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list forks params
func (o *ListForksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list forks params
func (o *ListForksParams) WithContext(ctx context.Context) *ListForksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list forks params
func (o *ListForksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list forks params
func (o *ListForksParams) WithHTTPClient(client *http.Client) *ListForksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list forks params
func (o *ListForksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOwner adds the owner to the list forks params
func (o *ListForksParams) WithOwner(owner string) *ListForksParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the list forks params
func (o *ListForksParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRepo adds the repo to the list forks params
func (o *ListForksParams) WithRepo(repo string) *ListForksParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the list forks params
func (o *ListForksParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *ListForksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
