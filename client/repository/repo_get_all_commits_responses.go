// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "gitea.com/sapk/explore/models"
)

// RepoGetAllCommitsReader is a Reader for the RepoGetAllCommits structure.
type RepoGetAllCommitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoGetAllCommitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoGetAllCommitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoGetAllCommitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRepoGetAllCommitsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoGetAllCommitsOK creates a RepoGetAllCommitsOK with default headers values
func NewRepoGetAllCommitsOK() *RepoGetAllCommitsOK {
	return &RepoGetAllCommitsOK{}
}

/*RepoGetAllCommitsOK handles this case with default header values.

CommitList
*/
type RepoGetAllCommitsOK struct {
	/*True if there is another page
	 */
	XHasMore bool
	/*The current page
	 */
	XPage int64
	/*Total number of pages
	 */
	XPageCount int64
	/*Commits per page
	 */
	XPerPage int64
	/*Total commit count
	 */
	XTotal int64

	Payload []*models.Commit
}

func (o *RepoGetAllCommitsOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/commits][%d] repoGetAllCommitsOK  %+v", 200, o.Payload)
}

func (o *RepoGetAllCommitsOK) GetPayload() []*models.Commit {
	return o.Payload
}

func (o *RepoGetAllCommitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-HasMore
	xHasMore, err := swag.ConvertBool(response.GetHeader("X-HasMore"))
	if err != nil {
		return errors.InvalidType("X-HasMore", "header", "bool", response.GetHeader("X-HasMore"))
	}
	o.XHasMore = xHasMore

	// response header X-Page
	xPage, err := swag.ConvertInt64(response.GetHeader("X-Page"))
	if err != nil {
		return errors.InvalidType("X-Page", "header", "int64", response.GetHeader("X-Page"))
	}
	o.XPage = xPage

	// response header X-PageCount
	xPageCount, err := swag.ConvertInt64(response.GetHeader("X-PageCount"))
	if err != nil {
		return errors.InvalidType("X-PageCount", "header", "int64", response.GetHeader("X-PageCount"))
	}
	o.XPageCount = xPageCount

	// response header X-PerPage
	xPerPage, err := swag.ConvertInt64(response.GetHeader("X-PerPage"))
	if err != nil {
		return errors.InvalidType("X-PerPage", "header", "int64", response.GetHeader("X-PerPage"))
	}
	o.XPerPage = xPerPage

	// response header X-Total
	xTotal, err := swag.ConvertInt64(response.GetHeader("X-Total"))
	if err != nil {
		return errors.InvalidType("X-Total", "header", "int64", response.GetHeader("X-Total"))
	}
	o.XTotal = xTotal

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoGetAllCommitsNotFound creates a RepoGetAllCommitsNotFound with default headers values
func NewRepoGetAllCommitsNotFound() *RepoGetAllCommitsNotFound {
	return &RepoGetAllCommitsNotFound{}
}

/*RepoGetAllCommitsNotFound handles this case with default header values.

APINotFound is a not found empty response
*/
type RepoGetAllCommitsNotFound struct {
}

func (o *RepoGetAllCommitsNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/commits][%d] repoGetAllCommitsNotFound ", 404)
}

func (o *RepoGetAllCommitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepoGetAllCommitsConflict creates a RepoGetAllCommitsConflict with default headers values
func NewRepoGetAllCommitsConflict() *RepoGetAllCommitsConflict {
	return &RepoGetAllCommitsConflict{}
}

/*RepoGetAllCommitsConflict handles this case with default header values.

EmptyRepository
*/
type RepoGetAllCommitsConflict struct {
	Payload *models.APIError
}

func (o *RepoGetAllCommitsConflict) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/commits][%d] repoGetAllCommitsConflict  %+v", 409, o.Payload)
}

func (o *RepoGetAllCommitsConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *RepoGetAllCommitsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
