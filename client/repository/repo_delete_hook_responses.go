// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// RepoDeleteHookReader is a Reader for the RepoDeleteHook structure.
type RepoDeleteHookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoDeleteHookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRepoDeleteHookNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoDeleteHookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoDeleteHookNoContent creates a RepoDeleteHookNoContent with default headers values
func NewRepoDeleteHookNoContent() *RepoDeleteHookNoContent {
	return &RepoDeleteHookNoContent{}
}

/*RepoDeleteHookNoContent handles this case with default header values.

APIEmpty is an empty response
*/
type RepoDeleteHookNoContent struct {
}

func (o *RepoDeleteHookNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/hooks/{id}][%d] repoDeleteHookNoContent ", 204)
}

func (o *RepoDeleteHookNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepoDeleteHookNotFound creates a RepoDeleteHookNotFound with default headers values
func NewRepoDeleteHookNotFound() *RepoDeleteHookNotFound {
	return &RepoDeleteHookNotFound{}
}

/*RepoDeleteHookNotFound handles this case with default header values.

APINotFound is a not found empty response
*/
type RepoDeleteHookNotFound struct {
}

func (o *RepoDeleteHookNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/hooks/{id}][%d] repoDeleteHookNotFound ", 404)
}

func (o *RepoDeleteHookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
