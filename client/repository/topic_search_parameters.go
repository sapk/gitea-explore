// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTopicSearchParams creates a new TopicSearchParams object
// with the default values initialized.
func NewTopicSearchParams() *TopicSearchParams {
	var ()
	return &TopicSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTopicSearchParamsWithTimeout creates a new TopicSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTopicSearchParamsWithTimeout(timeout time.Duration) *TopicSearchParams {
	var ()
	return &TopicSearchParams{

		timeout: timeout,
	}
}

// NewTopicSearchParamsWithContext creates a new TopicSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewTopicSearchParamsWithContext(ctx context.Context) *TopicSearchParams {
	var ()
	return &TopicSearchParams{

		Context: ctx,
	}
}

// NewTopicSearchParamsWithHTTPClient creates a new TopicSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTopicSearchParamsWithHTTPClient(client *http.Client) *TopicSearchParams {
	var ()
	return &TopicSearchParams{
		HTTPClient: client,
	}
}

/*TopicSearchParams contains all the parameters to send to the API endpoint
for the topic search operation typically these are written to a http.Request
*/
type TopicSearchParams struct {

	/*Q
	  keywords to search

	*/
	Q string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the topic search params
func (o *TopicSearchParams) WithTimeout(timeout time.Duration) *TopicSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the topic search params
func (o *TopicSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the topic search params
func (o *TopicSearchParams) WithContext(ctx context.Context) *TopicSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the topic search params
func (o *TopicSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the topic search params
func (o *TopicSearchParams) WithHTTPClient(client *http.Client) *TopicSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the topic search params
func (o *TopicSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQ adds the q to the topic search params
func (o *TopicSearchParams) WithQ(q string) *TopicSearchParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the topic search params
func (o *TopicSearchParams) SetQ(q string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *TopicSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {
		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
