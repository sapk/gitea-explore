// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRepoCreateReleaseAttachmentParams creates a new RepoCreateReleaseAttachmentParams object
// with the default values initialized.
func NewRepoCreateReleaseAttachmentParams() *RepoCreateReleaseAttachmentParams {
	var ()
	return &RepoCreateReleaseAttachmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRepoCreateReleaseAttachmentParamsWithTimeout creates a new RepoCreateReleaseAttachmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRepoCreateReleaseAttachmentParamsWithTimeout(timeout time.Duration) *RepoCreateReleaseAttachmentParams {
	var ()
	return &RepoCreateReleaseAttachmentParams{

		timeout: timeout,
	}
}

// NewRepoCreateReleaseAttachmentParamsWithContext creates a new RepoCreateReleaseAttachmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewRepoCreateReleaseAttachmentParamsWithContext(ctx context.Context) *RepoCreateReleaseAttachmentParams {
	var ()
	return &RepoCreateReleaseAttachmentParams{

		Context: ctx,
	}
}

// NewRepoCreateReleaseAttachmentParamsWithHTTPClient creates a new RepoCreateReleaseAttachmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRepoCreateReleaseAttachmentParamsWithHTTPClient(client *http.Client) *RepoCreateReleaseAttachmentParams {
	var ()
	return &RepoCreateReleaseAttachmentParams{
		HTTPClient: client,
	}
}

/*RepoCreateReleaseAttachmentParams contains all the parameters to send to the API endpoint
for the repo create release attachment operation typically these are written to a http.Request
*/
type RepoCreateReleaseAttachmentParams struct {

	/*Attachment
	  attachment to upload

	*/
	Attachment runtime.NamedReadCloser
	/*ID
	  id of the release

	*/
	ID int64
	/*Name
	  name of the attachment

	*/
	Name *string
	/*Owner
	  owner of the repo

	*/
	Owner string
	/*Repo
	  name of the repo

	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithTimeout(timeout time.Duration) *RepoCreateReleaseAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithContext(ctx context.Context) *RepoCreateReleaseAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithHTTPClient(client *http.Client) *RepoCreateReleaseAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttachment adds the attachment to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithAttachment(attachment runtime.NamedReadCloser) *RepoCreateReleaseAttachmentParams {
	o.SetAttachment(attachment)
	return o
}

// SetAttachment adds the attachment to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetAttachment(attachment runtime.NamedReadCloser) {
	o.Attachment = attachment
}

// WithID adds the id to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithID(id int64) *RepoCreateReleaseAttachmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetID(id int64) {
	o.ID = id
}

// WithName adds the name to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithName(name *string) *RepoCreateReleaseAttachmentParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetName(name *string) {
	o.Name = name
}

// WithOwner adds the owner to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithOwner(owner string) *RepoCreateReleaseAttachmentParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRepo adds the repo to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) WithRepo(repo string) *RepoCreateReleaseAttachmentParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo create release attachment params
func (o *RepoCreateReleaseAttachmentParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *RepoCreateReleaseAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param attachment
	if err := r.SetFileParam("attachment", o.Attachment); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
