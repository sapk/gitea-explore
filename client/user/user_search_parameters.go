// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserSearchParams creates a new UserSearchParams object
// with the default values initialized.
func NewUserSearchParams() *UserSearchParams {
	var ()
	return &UserSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserSearchParamsWithTimeout creates a new UserSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserSearchParamsWithTimeout(timeout time.Duration) *UserSearchParams {
	var ()
	return &UserSearchParams{

		timeout: timeout,
	}
}

// NewUserSearchParamsWithContext creates a new UserSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserSearchParamsWithContext(ctx context.Context) *UserSearchParams {
	var ()
	return &UserSearchParams{

		Context: ctx,
	}
}

// NewUserSearchParamsWithHTTPClient creates a new UserSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserSearchParamsWithHTTPClient(client *http.Client) *UserSearchParams {
	var ()
	return &UserSearchParams{
		HTTPClient: client,
	}
}

/*UserSearchParams contains all the parameters to send to the API endpoint
for the user search operation typically these are written to a http.Request
*/
type UserSearchParams struct {

	/*Limit
	  maximum number of users to return

	*/
	Limit *int64
	/*Q
	  keyword

	*/
	Q *string
	/*UID
	  ID of the user to search for

	*/
	UID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user search params
func (o *UserSearchParams) WithTimeout(timeout time.Duration) *UserSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user search params
func (o *UserSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user search params
func (o *UserSearchParams) WithContext(ctx context.Context) *UserSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user search params
func (o *UserSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user search params
func (o *UserSearchParams) WithHTTPClient(client *http.Client) *UserSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user search params
func (o *UserSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the user search params
func (o *UserSearchParams) WithLimit(limit *int64) *UserSearchParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the user search params
func (o *UserSearchParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithQ adds the q to the user search params
func (o *UserSearchParams) WithQ(q *string) *UserSearchParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the user search params
func (o *UserSearchParams) SetQ(q *string) {
	o.Q = q
}

// WithUID adds the uid to the user search params
func (o *UserSearchParams) WithUID(uid *int64) *UserSearchParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the user search params
func (o *UserSearchParams) SetUID(uid *int64) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *UserSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.UID != nil {

		// query param uid
		var qrUID int64
		if o.UID != nil {
			qrUID = *o.UID
		}
		qUID := swag.FormatInt64(qrUID)
		if qUID != "" {
			if err := r.SetQueryParam("uid", qUID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
