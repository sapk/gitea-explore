// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserCreateTokenParams creates a new UserCreateTokenParams object
// with the default values initialized.
func NewUserCreateTokenParams() *UserCreateTokenParams {
	var ()
	return &UserCreateTokenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserCreateTokenParamsWithTimeout creates a new UserCreateTokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserCreateTokenParamsWithTimeout(timeout time.Duration) *UserCreateTokenParams {
	var ()
	return &UserCreateTokenParams{

		timeout: timeout,
	}
}

// NewUserCreateTokenParamsWithContext creates a new UserCreateTokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserCreateTokenParamsWithContext(ctx context.Context) *UserCreateTokenParams {
	var ()
	return &UserCreateTokenParams{

		Context: ctx,
	}
}

// NewUserCreateTokenParamsWithHTTPClient creates a new UserCreateTokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserCreateTokenParamsWithHTTPClient(client *http.Client) *UserCreateTokenParams {
	var ()
	return &UserCreateTokenParams{
		HTTPClient: client,
	}
}

/*UserCreateTokenParams contains all the parameters to send to the API endpoint
for the user create token operation typically these are written to a http.Request
*/
type UserCreateTokenParams struct {

	/*AccessToken*/
	AccessToken UserCreateTokenBody
	/*Username
	  username of user

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user create token params
func (o *UserCreateTokenParams) WithTimeout(timeout time.Duration) *UserCreateTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user create token params
func (o *UserCreateTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user create token params
func (o *UserCreateTokenParams) WithContext(ctx context.Context) *UserCreateTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user create token params
func (o *UserCreateTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user create token params
func (o *UserCreateTokenParams) WithHTTPClient(client *http.Client) *UserCreateTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user create token params
func (o *UserCreateTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessToken adds the accessToken to the user create token params
func (o *UserCreateTokenParams) WithAccessToken(accessToken UserCreateTokenBody) *UserCreateTokenParams {
	o.SetAccessToken(accessToken)
	return o
}

// SetAccessToken adds the accessToken to the user create token params
func (o *UserCreateTokenParams) SetAccessToken(accessToken UserCreateTokenBody) {
	o.AccessToken = accessToken
}

// WithUsername adds the username to the user create token params
func (o *UserCreateTokenParams) WithUsername(username string) *UserCreateTokenParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the user create token params
func (o *UserCreateTokenParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *UserCreateTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.AccessToken); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
