// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateOrgRepo creates a repository in an organization
*/
func (a *Client) CreateOrgRepo(params *CreateOrgRepoParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrgRepoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrgRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrgRepo",
		Method:             "POST",
		PathPattern:        "/org/{org}/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOrgRepoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrgRepoCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrgRepo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgAddTeamMember adds a team member
*/
func (a *Client) OrgAddTeamMember(params *OrgAddTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgAddTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgAddTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgAddTeamMember",
		Method:             "PUT",
		PathPattern:        "/teams/{id}/members/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgAddTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgAddTeamMemberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgAddTeamMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgAddTeamRepository adds a repository to a team
*/
func (a *Client) OrgAddTeamRepository(params *OrgAddTeamRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*OrgAddTeamRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgAddTeamRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgAddTeamRepository",
		Method:             "PUT",
		PathPattern:        "/teams/{id}/repos/{org}/{repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgAddTeamRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgAddTeamRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgAddTeamRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgConcealMember conceals a user s membership
*/
func (a *Client) OrgConcealMember(params *OrgConcealMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgConcealMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgConcealMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgConcealMember",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}/public_members/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgConcealMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgConcealMemberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgConcealMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgCreate creates an organization
*/
func (a *Client) OrgCreate(params *OrgCreateParams, authInfo runtime.ClientAuthInfoWriter) (*OrgCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgCreate",
		Method:             "POST",
		PathPattern:        "/orgs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgCreateHook creates a hook
*/
func (a *Client) OrgCreateHook(params *OrgCreateHookParams, authInfo runtime.ClientAuthInfoWriter) (*OrgCreateHookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgCreateHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgCreateHook",
		Method:             "POST",
		PathPattern:        "/orgs/{org}/hooks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgCreateHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgCreateHookCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgCreateHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgCreateTeam creates a team
*/
func (a *Client) OrgCreateTeam(params *OrgCreateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*OrgCreateTeamCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgCreateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgCreateTeam",
		Method:             "POST",
		PathPattern:        "/orgs/{org}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgCreateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgCreateTeamCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgCreateTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgDelete deletes an organization
*/
func (a *Client) OrgDelete(params *OrgDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*OrgDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgDelete",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgDeleteHook deletes a hook
*/
func (a *Client) OrgDeleteHook(params *OrgDeleteHookParams, authInfo runtime.ClientAuthInfoWriter) (*OrgDeleteHookNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgDeleteHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgDeleteHook",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgDeleteHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgDeleteHookNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgDeleteHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgDeleteMember removes a member from an organization
*/
func (a *Client) OrgDeleteMember(params *OrgDeleteMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgDeleteMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgDeleteMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgDeleteMember",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}/members/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgDeleteMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgDeleteMemberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgDeleteMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgDeleteTeam deletes a team
*/
func (a *Client) OrgDeleteTeam(params *OrgDeleteTeamParams, authInfo runtime.ClientAuthInfoWriter) (*OrgDeleteTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgDeleteTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgDeleteTeam",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgDeleteTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgDeleteTeamNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgDeleteTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgEdit edits an organization
*/
func (a *Client) OrgEdit(params *OrgEditParams, authInfo runtime.ClientAuthInfoWriter) (*OrgEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgEditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgEdit",
		Method:             "PATCH",
		PathPattern:        "/orgs/{org}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgEdit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgEditHook updates a hook
*/
func (a *Client) OrgEditHook(params *OrgEditHookParams, authInfo runtime.ClientAuthInfoWriter) (*OrgEditHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgEditHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgEditHook",
		Method:             "PATCH",
		PathPattern:        "/orgs/{org}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgEditHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgEditHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgEditHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgEditTeam edits a team
*/
func (a *Client) OrgEditTeam(params *OrgEditTeamParams, authInfo runtime.ClientAuthInfoWriter) (*OrgEditTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgEditTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgEditTeam",
		Method:             "PATCH",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgEditTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgEditTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgEditTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgGet gets an organization
*/
func (a *Client) OrgGet(params *OrgGetParams, authInfo runtime.ClientAuthInfoWriter) (*OrgGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgGet",
		Method:             "GET",
		PathPattern:        "/orgs/{org}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgGetHook gets a hook
*/
func (a *Client) OrgGetHook(params *OrgGetHookParams, authInfo runtime.ClientAuthInfoWriter) (*OrgGetHookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgGetHookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgGetHook",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/hooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgGetHookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgGetHookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgGetHook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgGetTeam gets a team
*/
func (a *Client) OrgGetTeam(params *OrgGetTeamParams, authInfo runtime.ClientAuthInfoWriter) (*OrgGetTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgGetTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgGetTeam",
		Method:             "GET",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgGetTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgGetTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgGetTeam: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgIsMember checks if a user is a member of an organization
*/
func (a *Client) OrgIsMember(params *OrgIsMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgIsMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgIsMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgIsMember",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/members/{username}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgIsMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgIsMemberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgIsMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgIsPublicMember checks if a user is a public member of an organization
*/
func (a *Client) OrgIsPublicMember(params *OrgIsPublicMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgIsPublicMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgIsPublicMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgIsPublicMember",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/public_members/{username}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgIsPublicMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgIsPublicMemberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgIsPublicMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListCurrentUserOrgs lists the current user s organizations
*/
func (a *Client) OrgListCurrentUserOrgs(params *OrgListCurrentUserOrgsParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListCurrentUserOrgsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListCurrentUserOrgsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListCurrentUserOrgs",
		Method:             "GET",
		PathPattern:        "/user/orgs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListCurrentUserOrgsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListCurrentUserOrgsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListCurrentUserOrgs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListHooks lists an organization s webhooks
*/
func (a *Client) OrgListHooks(params *OrgListHooksParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListHooks",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListHooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListHooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListMembers lists an organization s members
*/
func (a *Client) OrgListMembers(params *OrgListMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListMembers",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListPublicMembers lists an organization s public members
*/
func (a *Client) OrgListPublicMembers(params *OrgListPublicMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListPublicMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListPublicMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListPublicMembers",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/public_members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListPublicMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListPublicMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListPublicMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListRepos lists an organization s repos
*/
func (a *Client) OrgListRepos(params *OrgListReposParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListReposParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListRepos",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListReposReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListTeamMember lists a particular member of team
*/
func (a *Client) OrgListTeamMember(params *OrgListTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListTeamMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListTeamMember",
		Method:             "GET",
		PathPattern:        "/teams/{id}/members/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListTeamMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListTeamMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListTeamMembers lists a team s members
*/
func (a *Client) OrgListTeamMembers(params *OrgListTeamMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListTeamMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListTeamMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListTeamMembers",
		Method:             "GET",
		PathPattern:        "/teams/{id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListTeamMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListTeamMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListTeamMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListTeamRepos lists a team s repos
*/
func (a *Client) OrgListTeamRepos(params *OrgListTeamReposParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListTeamReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListTeamReposParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListTeamRepos",
		Method:             "GET",
		PathPattern:        "/teams/{id}/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListTeamReposReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListTeamReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListTeamRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListTeams lists an organization s teams
*/
func (a *Client) OrgListTeams(params *OrgListTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListTeams",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListTeams: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgListUserOrgs lists a user s organizations
*/
func (a *Client) OrgListUserOrgs(params *OrgListUserOrgsParams, authInfo runtime.ClientAuthInfoWriter) (*OrgListUserOrgsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgListUserOrgsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgListUserOrgs",
		Method:             "GET",
		PathPattern:        "/users/{username}/orgs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgListUserOrgsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgListUserOrgsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgListUserOrgs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgPublicizeMember publicizes a user s membership
*/
func (a *Client) OrgPublicizeMember(params *OrgPublicizeMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgPublicizeMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgPublicizeMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgPublicizeMember",
		Method:             "PUT",
		PathPattern:        "/orgs/{org}/public_members/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgPublicizeMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgPublicizeMemberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgPublicizeMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgRemoveTeamMember removes a team member
*/
func (a *Client) OrgRemoveTeamMember(params *OrgRemoveTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*OrgRemoveTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgRemoveTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgRemoveTeamMember",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}/members/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgRemoveTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgRemoveTeamMemberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgRemoveTeamMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrgRemoveTeamRepository removes a repository from a team

This does not delete the repository, it only removes the repository from the team.
*/
func (a *Client) OrgRemoveTeamRepository(params *OrgRemoveTeamRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*OrgRemoveTeamRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgRemoveTeamRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orgRemoveTeamRepository",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}/repos/{org}/{repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrgRemoveTeamRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgRemoveTeamRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orgRemoveTeamRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TeamSearch searches for teams within an organization
*/
func (a *Client) TeamSearch(params *TeamSearchParams, authInfo runtime.ClientAuthInfoWriter) (*TeamSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "teamSearch",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/teams/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TeamSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for teamSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
