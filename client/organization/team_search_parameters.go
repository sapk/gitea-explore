// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTeamSearchParams creates a new TeamSearchParams object
// with the default values initialized.
func NewTeamSearchParams() *TeamSearchParams {
	var ()
	return &TeamSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTeamSearchParamsWithTimeout creates a new TeamSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTeamSearchParamsWithTimeout(timeout time.Duration) *TeamSearchParams {
	var ()
	return &TeamSearchParams{

		timeout: timeout,
	}
}

// NewTeamSearchParamsWithContext creates a new TeamSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewTeamSearchParamsWithContext(ctx context.Context) *TeamSearchParams {
	var ()
	return &TeamSearchParams{

		Context: ctx,
	}
}

// NewTeamSearchParamsWithHTTPClient creates a new TeamSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTeamSearchParamsWithHTTPClient(client *http.Client) *TeamSearchParams {
	var ()
	return &TeamSearchParams{
		HTTPClient: client,
	}
}

/*TeamSearchParams contains all the parameters to send to the API endpoint
for the team search operation typically these are written to a http.Request
*/
type TeamSearchParams struct {

	/*IncludeDesc
	  include search within team description (defaults to true)

	*/
	IncludeDesc *bool
	/*Limit
	  limit size of results

	*/
	Limit *int64
	/*Org
	  name of the organization

	*/
	Org string
	/*Page
	  page number of results to return (1-based)

	*/
	Page *int64
	/*Q
	  keywords to search

	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the team search params
func (o *TeamSearchParams) WithTimeout(timeout time.Duration) *TeamSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the team search params
func (o *TeamSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the team search params
func (o *TeamSearchParams) WithContext(ctx context.Context) *TeamSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the team search params
func (o *TeamSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the team search params
func (o *TeamSearchParams) WithHTTPClient(client *http.Client) *TeamSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the team search params
func (o *TeamSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeDesc adds the includeDesc to the team search params
func (o *TeamSearchParams) WithIncludeDesc(includeDesc *bool) *TeamSearchParams {
	o.SetIncludeDesc(includeDesc)
	return o
}

// SetIncludeDesc adds the includeDesc to the team search params
func (o *TeamSearchParams) SetIncludeDesc(includeDesc *bool) {
	o.IncludeDesc = includeDesc
}

// WithLimit adds the limit to the team search params
func (o *TeamSearchParams) WithLimit(limit *int64) *TeamSearchParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the team search params
func (o *TeamSearchParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrg adds the org to the team search params
func (o *TeamSearchParams) WithOrg(org string) *TeamSearchParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the team search params
func (o *TeamSearchParams) SetOrg(org string) {
	o.Org = org
}

// WithPage adds the page to the team search params
func (o *TeamSearchParams) WithPage(page *int64) *TeamSearchParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the team search params
func (o *TeamSearchParams) SetPage(page *int64) {
	o.Page = page
}

// WithQ adds the q to the team search params
func (o *TeamSearchParams) WithQ(q *string) *TeamSearchParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the team search params
func (o *TeamSearchParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *TeamSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeDesc != nil {

		// query param include_desc
		var qrIncludeDesc bool
		if o.IncludeDesc != nil {
			qrIncludeDesc = *o.IncludeDesc
		}
		qIncludeDesc := swag.FormatBool(qrIncludeDesc)
		if qIncludeDesc != "" {
			if err := r.SetQueryParam("include_desc", qIncludeDesc); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
