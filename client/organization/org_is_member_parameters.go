// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOrgIsMemberParams creates a new OrgIsMemberParams object
// with the default values initialized.
func NewOrgIsMemberParams() *OrgIsMemberParams {
	var ()
	return &OrgIsMemberParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrgIsMemberParamsWithTimeout creates a new OrgIsMemberParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrgIsMemberParamsWithTimeout(timeout time.Duration) *OrgIsMemberParams {
	var ()
	return &OrgIsMemberParams{

		timeout: timeout,
	}
}

// NewOrgIsMemberParamsWithContext creates a new OrgIsMemberParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrgIsMemberParamsWithContext(ctx context.Context) *OrgIsMemberParams {
	var ()
	return &OrgIsMemberParams{

		Context: ctx,
	}
}

// NewOrgIsMemberParamsWithHTTPClient creates a new OrgIsMemberParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrgIsMemberParamsWithHTTPClient(client *http.Client) *OrgIsMemberParams {
	var ()
	return &OrgIsMemberParams{
		HTTPClient: client,
	}
}

/*OrgIsMemberParams contains all the parameters to send to the API endpoint
for the org is member operation typically these are written to a http.Request
*/
type OrgIsMemberParams struct {

	/*Org
	  name of the organization

	*/
	Org string
	/*Username
	  username of the user

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the org is member params
func (o *OrgIsMemberParams) WithTimeout(timeout time.Duration) *OrgIsMemberParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the org is member params
func (o *OrgIsMemberParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the org is member params
func (o *OrgIsMemberParams) WithContext(ctx context.Context) *OrgIsMemberParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the org is member params
func (o *OrgIsMemberParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the org is member params
func (o *OrgIsMemberParams) WithHTTPClient(client *http.Client) *OrgIsMemberParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the org is member params
func (o *OrgIsMemberParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrg adds the org to the org is member params
func (o *OrgIsMemberParams) WithOrg(org string) *OrgIsMemberParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the org is member params
func (o *OrgIsMemberParams) SetOrg(org string) {
	o.Org = org
}

// WithUsername adds the username to the org is member params
func (o *OrgIsMemberParams) WithUsername(username string) *OrgIsMemberParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the org is member params
func (o *OrgIsMemberParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *OrgIsMemberParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
